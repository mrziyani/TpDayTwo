@page "/"
@page "/login"


@using Front.Models
@using Blazored.LocalStorage
@using Front.Service

@inject IUserService UserService
@inject ILocalStorageService localStorage
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-form">
        <h3>Login</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary">Login</button>

            <p>Do not have an account? <a href="/register">Sign up here</a></p>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="mt-3 alert alert-info">@message</div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string message;

    private async Task HandleLogin()
    {
        var token = await UserService.LoginUserAsync(loginModel);
        if (!string.IsNullOrEmpty(token))
        {
            await localStorage.SetItemAsync("authToken", token);
            message = "Logged in successfully!";
            Navigation.NavigateTo("/users");
        }
        else
        {
            message = "Login failed. Check your credentials.";
        }
    }
}
