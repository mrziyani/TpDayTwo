@page "/users"
@layout MainLayout
@using Front.Models
@using Front.Service
@using Blazored.LocalStorage
@inject IUserService UserService
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<h3>Users List</h3>






@if (loading)
{
    <p><em>Loading users...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (users != null && users.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users found.</p>
}

@code {
    private IEnumerable<User> users;
    private bool loading = true;
    private string errorMessage;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the token from local storage.
        string token = await localStorage.GetItemAsync<string>("authToken");
        isLoggedIn = !string.IsNullOrEmpty(token);

        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/errorlogin");
        }

        try
        {
            
            users = await UserService.GetAllUsersAsync(token);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error retrieving users: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    
}
